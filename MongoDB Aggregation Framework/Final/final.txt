1. Consider the following aggregation pipelines:

Pipeline 1
	db.coll.aggregate([
	  {"$match": {"field_a": {"$gt": 1983}}},
	  {"$project": { "field_a": "$field_a.1", "field_b": 1, "field_c": 1  }},
	  {"$replaceRoot":{"newRoot": {"_id": "$field_c", "field_b": "$field_b"}}},
	  {"$out": "coll2"},
	  {"$match": {"_id.field_f": {"$gt": 1}}},
	  {"$replaceRoot":{"newRoot": {"_id": "$field_b", "field_c": "$_id"}}}
	])
Pipeline 2
	db.coll.aggregate([
	  {"$match": {"field_a": {"$gt": 111}}},
	  {"$geoNear": {
		"near": { "type": "Point", "coordinates": [ -73.99279 , 40.719296 ] },
		"distanceField": "distance"}},
	  {"$project": { "distance": "$distance", "name": 1, "_id": 0  }}
	])
Pipeline 3
	db.coll.aggregate([
	  {
		"$facet": {
		  "averageCount": [
			{"$unwind": "$array_field"},
			{"$group": {"_id": "$array_field", "count": {"$sum": 1}}}
		  ],
		  "categorized": [{"$sortByCount": "$arrayField"}]
		},
	  },
	  {
		"$facet": {
		  "new_shape": [{"$project": {"range": "$categorized._id"}}],
		  "stats": [{"$match": {"range": 1}}, {"$indexStats": {}}]
		}
	  }
	])
	
which of following statements are correct?

a. Pipeline 2 fails because we cannot project distance field
b. Pipeline 3 fails because $indexStats must be the first stage in a pipeline and may not be used within a $facet (Y)
c. Pipeline 3 executes correctly
d. Pipeline 1 is incorrect because you can only have one $replaceRoot stage in your pipeline
e. Pipeline 1 fails since $out is required to be the last stage of the pipeline (Y)
f. Pipeline 3 fails since you can only have one $facet stage per pipeline
g. Pipeline 2 is incorrect because $geoNear needs to be the first stage of our pipeline (Y)

2. Consider the following collection:
	db.collection.find()
	{
	  "a": [1, 34, 13]
	}
Pipeline 1
	db.collection.aggregate([
	  {"$match": { "a" : {"$sum": 1}  }},
	  {"$project": { "_id" : {"$addToSet": "$a"}  }},
	  {"$group": { "_id" : "", "max_a": {"$max": "$_id"}  }}
	])
Pipeline 2
	db.collection.aggregate([
		{"$project": { "a_divided" : {"$divide": ["$a", 1]}  }}
	])
Pipeline 3
	db.collection.aggregate([
		{"$project": {"a": {"$max": "$a"}}},
		{"$group": {"_id": "$$ROOT._id", "all_as": {"$sum": "$a"}}}
	])
	
a. Pipeline 2 fails because the $divide operator only supports numeric types (Y)
b. Pipeline 1 is incorrect because you cannot use an accumulator expression in a $match stage. (Y)
c. Pipeline 1 will fail because $max can not operator on _id field
d. Pipeline 3 is correct and will execute with no error (Y)
e. Pipeline 2 is incorrect since $divide cannot operate over field expressions

notes: how to divide an array?
db.numbers.aggregate([{"$unwind": "$a"}, {$group: {_id: null, a: {$push: {$divide: ["$a", 2]}} }}])

3. Consider the following collection documents:
db.people.find()
	{ "_id" : 0, "name" : "Bernice Pope", "age" : 69, "date" : ISODate("2017-10-04T18:35:44.011Z") }
	{ "_id" : 1, "name" : "Eric Malone", "age" : 57, "date" : ISODate("2017-10-04T18:35:44.014Z") }
	{ "_id" : 2, "name" : "Blanche Miller", "age" : 35, "date" : ISODate("2017-10-04T18:35:44.015Z") }
	{ "_id" : 3, "name" : "Sue Perez", "age" : 64, "date" : ISODate("2017-10-04T18:35:44.016Z") }
	{ "_id" : 4, "name" : "Ryan White", "age" : 39, "date" : ISODate("2017-10-04T18:35:44.019Z") }
	{ "_id" : 5, "name" : "Grace Payne", "age" : 56, "date" : ISODate("2017-10-04T18:35:44.020Z") }
	{ "_id" : 6, "name" : "Jessie Yates", "age" : 53, "date" : ISODate("2017-10-04T18:35:44.020Z") }
	{ "_id" : 7, "name" : "Herbert Mason", "age" : 37, "date" : ISODate("2017-10-04T18:35:44.020Z") }
	{ "_id" : 8, "name" : "Jesse Jordan", "age" : 47, "date" : ISODate("2017-10-04T18:35:44.020Z") }
	{ "_id" : 9, "name" : "Hulda Fuller", "age" : 25, "date" : ISODate("2017-10-04T18:35:44.020Z") }
And the aggregation pipeline execution result:
	{ "_id" : 8, "names" : [ "Sue Perez" ], "word" : "P" }
	{ "_id" : 9, "names" : [ "Ryan White" ], "word" : "W" }
	{ "_id" : 10, "names" : [ "Eric Malone", "Grace Payne" ], "word" : "MP" }
	{ "_id" : 11, "names" : [ "Bernice Pope", "Jessie Yates", "Jesse Jordan", "Hulda Fuller" ], "word" : "PYJF" }
	{ "_id" : 12, "names" : [ "Herbert Mason" ], "word" : "M" }
	{ "_id" : 13, "names" : [ "Blanche Miller" ], "word" : "M" }

answer:
var pipeline = [{
    "$project": {
      "surname_capital": { "$substr": [{"$arrayElemAt": [ {"$split": [ "$name", " " ] }, 1]}, 0, 1 ] },
      "name_size": {  "$add" : [{"$strLenCP": "$name"}, -1]},
      "name": 1
    }
  },
  {
    "$group": {
      "_id": "$name_size",
      "word": { "$push": "$surname_capital" },
      "names": {"$push": "$name"}
    }
  },
  {
    "$project": {
      "word": {
        "$reduce": {
          "input": "$word",
          "initialValue": "",
          "in": { "$concat": ["$$value", "$$this"] }
        }
      },
      "names": 1
    }
  },
  {
    "$sort": { "_id": 1}
  }
]
 
4. In the above pipeline, which are incorrect stages or/and expressions being used?
	var pipeline = [
	  {
		$match: { a: { $type: "integer" } }
	  },
	  {
		$project: {
		  _id: 0,
		  a_times_b: { $multiply: ["$a", "$b"] }
		}
	  },
	  {
		$facet: {
		  facet_1: [{ $sortByCount: "a_times_b" }],
		  facet_2: [{ $project: { abs_facet1: { $abs: "$facet_1._id" } } }],
		  facet_3: [
			{
			  $facet: {
				facet_3_1: [{ $bucketAuto: { groupBy: "$_id", buckets: 2 } }]
			  }
			}
		  ]
		}
	  }

a. a $type expression does not take a string as its value; only the BSON numeric values can be specified to identify the types.
b. can not nest a $facet stage as a sub-pipeline. (Y)
c. a $multiply expression takes a document as input, not an array.
d. facet_2 uses the output of a parallel sub-pipeline, facet_1, to compute an expression (Y)
e. $sortByCount cannot be used within $facet stage.

5. Consider the following people collection and this sample document:
	{
	"_id": 0,
	"name": "Iva Estrada",
	"age": 95,
	"state": "WA",
	"phone": "(739) 557-2576",
	"ssn": "901-34-4492"
	}
The collection also has these indexes:
	[
	{
	  "v": 2,
	  "key": {
		"_id": 1
	  },
	  "name": "_id_",
	  "ns": "test.people"
	},
	{
	  "v": 2,
	  "key": {
		"name": 1
	  },
	  "name": "name_1",
	  "ns": "test.people"
	},
	{
	  "v": 2,
	  "key": {
		"state": 1
	  },
	  "name": "state_1",
	  "ns": "test.people"
	}
	]
If we would like to calculate the average age of all people in the collection by state, sorted by state, we could run the following aggregation pipeline:
	var pipeline = [
		{"$project": { "state": 1, "name": 1, "age": 1}},
		{"$group" : { "_id": "$state", "avg_age": {"$avg": "$age"}}},
		{"$sort": {"_id": 1}}
	  ]
Which of the following options will improve the execution of this aggregation pipeline?

answer:
var pipeline = [
    {"$sort": {"state": 1}},
    {"$project": { "state": 1, "name": 1, "age": 1}},
    {"$group" : { "_id": "$state", "avg_age": {"$avg": "$age"}}},
  ]

6. Consider the following people collection:
	db.people.find().limit(5)
	{ "_id" : 0, "name" : "Iva Estrada", "age" : 95, "state" : "WA", "phone" : "(739) 557-2576", "ssn" : "901-34-4492" }
	{ "_id" : 1, "name" : "Roger Walton", "age" : 92, "state" : "ID", "phone" : "(948) 527-2370", "ssn" : "498-61-9106" }
	{ "_id" : 2, "name" : "Isaiah Norton", "age" : 26, "state" : "FL", "phone" : "(344) 479-5646", "ssn" : "052-49-6049" }
	{ "_id" : 3, "name" : "Tillie Salazar", "age" : 88, "state" : "ND", "phone" : "(216) 414-5981", "ssn" : "708-26-3486" }
	{ "_id" : 4, "name" : "Cecelia Wells", "age" : 16, "state" : "SD", "phone" : "(669) 809-9128", "ssn" : "977-00-7372" }
And the corresponding people_contacts view:
	{ "_id" : 6585, "name" : "Aaron Alvarado", "phone" : "(631)*********", "ssn" : "********8014" }
	{ "_id" : 8510, "name" : "Aaron Barnes", "phone" : "(944)*********", "ssn" : "********6820" }
	{ "_id" : 6441, "name" : "Aaron Barton", "phone" : "(234)*********", "ssn" : "********1937" }
	{ "_id" : 8180, "name" : "Aaron Coleman", "phone" : "(431)*********", "ssn" : "********7559" }
	{ "_id" : 9738, "name" : "Aaron Fernandez", "phone" : "(578)*********", "ssn" : "********0211" }

answer:
var pipeline = [
  {
    "$sort": {"name": 1}
  },
  {
    "$project": {"name":1,
    "phone": {
      "$concat": [
        {"$arrayElemAt": [{"$split": ["$phone", " "]}, 0]} ,
        "*********"  ]
      },
    "ssn": {
      "$concat": [
        "********",
        {"$arrayElemAt": [{"$split": ["$ssn", "-"]}, 2]}
      ]
    }
  }
}
];
db.createView("people_contacts", "people", pipeline);

7. answer:
db.air_routes.aggregate([
  {
    $match: {
      src_airport: { $in: ["LHR", "JFK"] },
      dst_airport: { $in: ["LHR", "JFK"] }
    }
  },
  {
    $lookup: {
      from: "air_alliances",
      foreignField: "airlines",
      localField: "airline.name",
      as: "alliance"
    }
  },
  {
    $match: { alliance: { $ne: [] } }
  },
  {
    $addFields: {
      alliance: { $arrayElemAt: ["$alliance.name", 0] }
    }
  },
  {
    $group: {
      _id: "$airline.id",
      alliance: { $first: "$alliance" }
    }
  },
  {
    $sortByCount: "$alliance"
  }
])








































